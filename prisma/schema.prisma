generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model author {
  AuthorID   Int          @id @default(autoincrement())
  AuthorName String
  bookauthor bookauthor[]
}

model bank {
  BankID        Int             @id
  BankName      String
  publisherbank publisherbank[]
}

model bookauthor {
  BookID      Int
  AuthorID    Int
  author      author      @relation(fields: [AuthorID], references: [AuthorID], map: "BookAuthor_AuthorID_fkey")
  bookdetails bookdetails @relation(fields: [BookID], references: [BookID], map: "BookAuthor_BookID_fkey")

  @@id([BookID, AuthorID])
  @@index([AuthorID], map: "BookAuthor_AuthorID_fkey")
}

model bookdetails {
  BookID        Int             @id @default(autoincrement())
  BookName      String
  Price         Int
  Description   String
  FormatTypeID  Int
  Weight        Float
  ReleaseDate   DateTime        @db.Date
  PublisherID   String
  bookauthor    bookauthor[]
  formattype    formattype      @relation(fields: [FormatTypeID], references: [FormatTypeID], map: "BookDetails_FormatTypeID_fkey")
  bookgenre     bookgenre?
  promotionbook promotionbook[]
  review        review[]

  @@index([FormatTypeID], map: "BookDetails_FormatTypeID_fkey")
}

model bookgenre {
  BookID      Int         @id
  GenreID     Int
  bookdetails bookdetails @relation(fields: [BookID], references: [BookID], map: "BookGenre_BookID_fkey")
  genre       genre       @relation(fields: [GenreID], references: [GenreID], map: "BookGenre_GenreID_fkey")

  @@index([GenreID], map: "BookGenre_GenreID_fkey")
}

model formattype {
  FormatTypeID Int           @id @default(autoincrement())
  TypeName     String
  bookdetails  bookdetails[]
}

model genre {
  BookID    Int
  GenreID   Int         @unique(map: "Genre_GenreID_key")
  GenreName String
  bookgenre bookgenre[]

  @@id([BookID, GenreID])
}

model iteminbasket {
  ItemID    Int      @id @default(autoincrement())
  UserID    Int
  BookID    Int
  Quantity  Int
  TimeStamp DateTime @db.Date
  user      user     @relation(fields: [UserID], references: [UserID], map: "ItemInBasket_UserID_fkey")

  @@index([UserID], map: "ItemInBasket_UserID_fkey")
}

model order {
  OrderID            Int             @id @default(autoincrement())
  UserID             Int
  OrderDate          DateTime        @db.Date
  ShippingAddressID  Int
  PublisherID        Int
  TrackingNo         String
  TransactionTime    DateTime        @db.Date
  TransactionApprove Boolean
  publisher          publisher       @relation(fields: [PublisherID], references: [PublisherID], map: "Order_PublisherID_fkey")
  shippingaddress    shippingaddress @relation(fields: [ShippingAddressID], references: [ShippingAddressID], map: "Order_ShippingAddressID_fkey")
  user               user            @relation(fields: [UserID], references: [UserID], map: "Order_UserID_fkey")
  orderbook          orderbook?
  review             review[]

  @@index([PublisherID], map: "Order_PublisherID_fkey")
  @@index([ShippingAddressID], map: "Order_ShippingAddressID_fkey")
  @@index([UserID], map: "Order_UserID_fkey")
}

model orderbook {
  OrderID     Int   @id
  BookId      Int
  PromotionID Int
  Quantity    Int
  order       order @relation(fields: [OrderID], references: [OrderID], map: "OrderBook_OrderID_fkey")
}

model promotion {
  PromotionID     Int             @id @default(autoincrement())
  DiscountPercent Float
  PromotionDetail String
  StartDate       DateTime        @db.Date
  EndDate         DateTime        @db.Date
  PublisherID     Int
  publisher       publisher       @relation(fields: [PublisherID], references: [PublisherID], map: "Promotion_PublisherID_fkey")
  promotionbook   promotionbook[]

  @@index([PublisherID], map: "Promotion_PublisherID_fkey")
}

model promotionbook {
  PromotionID Int
  BookID      Int
  bookdetails bookdetails @relation(fields: [BookID], references: [BookID], map: "PromotionBook_BookID_fkey")
  promotion   promotion   @relation(fields: [PromotionID], references: [PromotionID], map: "PromotionBook_PromotionID_fkey")

  @@id([PromotionID, BookID])
  @@index([BookID], map: "PromotionBook_BookID_fkey")
}

model publisher {
  PublisherID        Int                @id @default(autoincrement())
  PublisherName      String
  Description        String
  PhoneNumber        String
  VerifyStatusID     Int
  order              order[]
  promotion          promotion[]
  user               user               @relation(fields: [PublisherID], references: [UserID], map: "Publisher_PublisherID_fkey")
  verificationstatus verificationstatus @relation(fields: [VerifyStatusID], references: [VerifyStatusID], map: "Publisher_VerifyStatusID_fkey")
  publisheraddress   publisheraddress[]
  publisherbank      publisherbank[]

  @@index([VerifyStatusID], map: "Publisher_VerifyStatusID_fkey")
}

model publisheraddress {
  PublisherID Int
  PaddressID  Int       @id
  Name        String
  Address     String
  Postcode    String
  PhoneNumber String
  publisher   publisher @relation(fields: [PublisherID], references: [PublisherID], map: "PublisherAddress_PublisherID_fkey")

  @@index([PublisherID], map: "PublisherAddress_PublisherID_fkey")
}

model publisherbank {
  PublisherID   Int
  PBankID       Int       @id
  BankName      String
  AccountNumber String
  BankID        Int
  bank          bank      @relation(fields: [BankID], references: [BankID], map: "PublisherBank_BankID_fkey")
  publisher     publisher @relation(fields: [PublisherID], references: [PublisherID], map: "PublisherBank_PublisherID_fkey")

  @@index([BankID], map: "PublisherBank_BankID_fkey")
  @@index([PublisherID], map: "PublisherBank_PublisherID_fkey")
}

model review {
  BookID      Int
  UserID      Int
  OrderID     Int
  Rate        Int
  Comment     String
  ReviewDate  DateTime    @db.Date
  bookdetails bookdetails @relation(fields: [BookID], references: [BookID], map: "Review_BookID_fkey")
  order       order       @relation(fields: [OrderID], references: [OrderID], map: "Review_OrderID_fkey")
  user        user        @relation(fields: [UserID], references: [UserID], map: "Review_UserID_fkey")

  @@id([BookID, UserID, OrderID])
  @@index([OrderID], map: "Review_OrderID_fkey")
  @@index([UserID], map: "Review_UserID_fkey")
}

model role {
  RoleID   Int    @id
  RoleName String
  user     user[]
}

model shippingaddress {
  ShippingAddressID Int     @id @default(autoincrement())
  UserID            Int
  Address           String
  ZipCode           String
  PhoneNumber       String
  order             order[]
  user              user    @relation(fields: [UserID], references: [UserID], map: "ShippingAddress_UserID_fkey")

  @@index([UserID], map: "ShippingAddress_UserID_fkey")
}

model user {
  UserID          Int               @id @default(autoincrement())
  UserName        String            @unique(map: "User_UserName_key")
  PhoneNumber     String            @unique(map: "User_PhoneNumber_key")
  Email           String            @unique(map: "User_Email_key")
  RoleID          Int
  Password        String
  FirstName       String
  LastName        String
  JoinDate        DateTime          @db.Date
  iteminbasket    iteminbasket[]
  order           order[]
  publisher       publisher?
  review          review[]
  shippingaddress shippingaddress[]
  role            role              @relation(fields: [RoleID], references: [RoleID], map: "User_RoleID_fkey")

  @@index([RoleID], map: "User_RoleID_fkey")
}

model verificationstatus {
  VerifyStatusID Int         @id
  Name           String
  publisher      publisher[]
}
